A Component and Communication Model for Push Systems.:
- https://doi.org/10.1007/3-540-48166-4_3
- 1999
A Fine-Grained Model for Code Mobility.:
- https://doi.org/10.1007/3-540-48166-4_4
- 1999
A Probabilistic Model for Software Projects.:
- https://doi.org/10.1007/3-540-48166-4_8
- 1999
Algebraic Software Architecture Reconfiguration.:
- https://doi.org/10.1007/3-540-48166-4_24
- 1999
An Efficient Algorithm for Computing MHP Information for Concurrent Java Programs.:
- https://doi.org/10.1007/3-540-48166-4_21
- 1999
An Efficient Relevant Slicing Method for Debugging.:
- https://doi.org/10.1007/3-540-48166-4_19
- 1999
Analyzing Exception Flow in Java Programs.:
- https://doi.org/10.1007/3-540-48166-4_20
- 1999
CHIME - A Metadata-Based Distributed Software Development Environment.:
- https://doi.org/10.1007/3-540-48166-4_28
- 1999
Checking Progress with Action Priority - Is it Fair?:
- https://doi.org/10.1007/3-540-48166-4_31
- 1999
CoffeeStrainer - Statically-Checked Constraints on the Definition and Use of Types in Java.:
- https://doi.org/10.1007/3-540-48166-4_22
- 1999
Collaboration and Composition - Issues for a Second Generation Process Language.:
- https://doi.org/10.1007/3-540-48166-4_6
- 1999
Comparison Checking - An Approach to Avoid Debugging of Optimized Code.:
- https://doi.org/10.1007/3-540-48166-4_17
- 1999
Components and Generative Programming.:
- https://doi.org/10.1007/3-540-48166-4_2
- 1999
Consistency Checking for Multiple View Software Architectures.:
- https://doi.org/10.1007/3-540-48166-4_25
- 1999
Coping with Type Casts in C.:
- https://doi.org/10.1007/3-540-48166-4_12
- 1999
Data-Flow Analysis of Program Fragments.:
- https://doi.org/10.1007/3-540-48166-4_15
- 1999
Designing Specification Languages for Process Control Systems - Lessons Learned and Steps to the Future.:
- https://doi.org/10.1007/3-540-48166-4_9
- 1999
Efficient Points-to Analysis for Whole-Program Analysis.:
- https://doi.org/10.1007/3-540-48166-4_13
- 1999
Extreme Programming - A Discipline of Software Development.:
- https://doi.org/10.1007/3-540-48166-4_1
- 1999
FACADE - A Typed Intermediate Language Dedicated to Smart Cards.:
- https://doi.org/10.1007/3-540-48166-4_29
- 1999
Robots - A Real-Time Systems Architectural Style.:
- https://doi.org/10.1007/3-540-48166-4_5
- 1999
? Software Engineering - ESEC/FSE&apos;99, 7th European Software Engineering Conference,
  Held Jointly with the 7th ACM SIGSOFT Symposium on the Foundations of Software Engineering,
  Toulouse, France, September 1999, Proceedings
: - https://doi.org/10.1007/3-540-48166-4
  - 1999
Specification-Based Prototyping for Embedded Systems.:
- https://doi.org/10.1007/3-540-48166-4_11
- 1999
Structural Specification-Based Testing - Automated Support and Experimental Evaluation.:
- https://doi.org/10.1007/3-540-48166-4_18
- 1999
Synergy between Component-Based and Generative Approaches.:
- https://doi.org/10.1007/3-540-48166-4_26
- 1999
The CIP Method - Component- and Model-Based Construction of Embedded Systems.:
- https://doi.org/10.1007/3-540-48166-4_23
- 1999
The Concept of Dynamic Analysis.:
- https://doi.org/10.1007/3-540-48166-4_14
- 1999
Transitioning Legacy Assets to a Product Line Architecture.:
- https://doi.org/10.1007/3-540-48166-4_27
- 1999
Using Model Checking to Generate Tests from Requirements Specifications.:
- https://doi.org/10.1007/3-540-48166-4_10
- 1999
Using UML for Software Process Modeling.:
- https://doi.org/10.1007/3-540-48166-4_7
- 1999
Verification of Real-Time Designs - Combining Scheduling Theory with Automatic Formal Verification.:
- https://doi.org/10.1007/3-540-48166-4_30
- 1999
Yesterday, My Program Worked. Today, It Does Not. Why?:
- https://doi.org/10.1007/3-540-48166-4_16
- 1999
