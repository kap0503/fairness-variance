'&quot;What Parts of Your Apps are Loved by Users?&quot; (T).':
- https://doi.org/10.1109/ASE.2015.57
- 2015
30th IEEE/ACM International Conference on Automated Software Engineering, ASE 2015, Lincoln, NE, USA, November 9-13, 2015:
- https://ieeexplore.ieee.org/xpl/conhome/7371449/proceeding
- 2015
A Generic Framework for Concept-Based Exploration of Semi-Structured Software Engineering Data.:
- https://doi.org/10.1109/ASE.2015.34
- 2015
A Message-Passing Architecture without Public Ids Using Send-to-Behavior.:
- https://doi.org/10.1109/ASE.2015.79
- 2015
Access-Path Abstraction - Scaling Field-Sensitive Data-Flow Analysis with Unbounded Access Paths (T).:
- https://doi.org/10.1109/ASE.2015.9
- 2015
ActivitySpace - A Remembrance Framework to Support Interapplication Information Needs.:
- https://doi.org/10.1109/ASE.2015.90
- 2015
An Automated Framework for Recommending Program Elements to Novices (N).:
- https://doi.org/10.1109/ASE.2015.54
- 2015
Array Shadow State Compression for Precise Dynamic Race Detection (T).:
- https://doi.org/10.1109/ASE.2015.19
- 2015
Automated Tagging of Software Projects Using Bytecode and Dependencies (N).:
- https://doi.org/10.1109/ASE.2015.38
- 2015
Automated Test Input Generation for Android - Are We There Yet? (E).:
- https://doi.org/10.1109/ASE.2015.89
- 2015
Automatic Detection of Potential Layout Faults Following Changes to Responsive Web Pages (N).:
- https://doi.org/10.1109/ASE.2015.31
- 2015
Automatically Generating Test Templates from Test Names (N).:
- https://doi.org/10.1109/ASE.2015.68
- 2015
Automating the Extraction of Model-Based Software Product Lines from Model Variants (T).:
- https://doi.org/10.1109/ASE.2015.44
- 2015
CIVL - Formal Verification of Parallel Programs.:
- https://doi.org/10.1109/ASE.2015.99
- 2015
CLAMI - Defect Prediction on Unlabeled Datasets (T).:
- https://doi.org/10.1109/ASE.2015.56
- 2015
Clone Merge - An Eclipse Plugin to Abstract Near-Clone C++ Methods.:
- https://doi.org/10.1109/ASE.2015.103
- 2015
CodeExchange - Supporting Reformulation of Internet-Scale Code Queries in Context (T).:
- https://doi.org/10.1109/ASE.2015.51
- 2015
CodeHow - Effective Code Search Based on API Understanding and Extended Boolean Model (E).:
- https://doi.org/10.1109/ASE.2015.42
- 2015
Combining Deep Learning with Information Retrieval to Localize Buggy Files for Bug Reports (N).:
- https://doi.org/10.1109/ASE.2015.73
- 2015
Configuration-Aware Change Impact Analysis (T).:
- https://doi.org/10.1109/ASE.2015.58
- 2015
Copy and Paste Redeemed (T).:
- https://doi.org/10.1109/ASE.2015.39
- 2015
Cost-Efficient Sampling for Performance Prediction of Configurable Systems (T).:
- https://doi.org/10.1109/ASE.2015.45
- 2015
Covert Communication in Mobile Applications (T).:
- https://doi.org/10.1109/ASE.2015.66
- 2015
Crust - A Bounded Verifier for Rust (N).:
- https://doi.org/10.1109/ASE.2015.77
- 2015
DRIVER - A Platform for Collaborative Framework Understanding.:
- https://doi.org/10.1109/ASE.2015.105
- 2015
Detecting Broken Pointcuts Using Structural Commonality and Degree of Interest (N).:
- https://doi.org/10.1109/ASE.2015.80
- 2015
Developing a DSL-Based Approach for Event-Based Monitoring of Systems of Systems - Experiences and Lessons Learned (E).:
- https://doi.org/10.1109/ASE.2015.25
- 2015
Development Emails Content Analyzer - Intention Mining in Developer Discussions (T).:
- https://doi.org/10.1109/ASE.2015.12
- 2015
Development History Granularity Transformations (N).:
- https://doi.org/10.1109/ASE.2015.53
- 2015
Divide-and-Conquer Approach for Multi-phase Statistical Migration for Source Code (T).:
- https://doi.org/10.1109/ASE.2015.74
- 2015
Do Automatically Generated Unit Tests Find Real Faults? An Empirical Study of Effectiveness and Challenges (T).:
- https://doi.org/10.1109/ASE.2015.86
- 2015
Dynamically Testing GUIs Using Ant Colony Optimization (T).:
- https://doi.org/10.1109/ASE.2015.70
- 2015
Efficient Data Model Verification with Many-Sorted Logic (T).:
- https://doi.org/10.1109/ASE.2015.48
- 2015
Ensemble Methods for App Review Classification - An Approach for Software Evolution (N).:
- https://doi.org/10.1109/ASE.2015.88
- 2015
Evolutionary Robustness Testing of Data Processing Systems Using Models and Data Mutation (T).:
- https://doi.org/10.1109/ASE.2015.13
- 2015
Executing Model-Based Tests on Platform-Specific Implementations (T).:
- https://doi.org/10.1109/ASE.2015.64
- 2015
Experiences from Designing and Validating a Software Modernization Transformation (E).:
- https://doi.org/10.1109/ASE.2015.84
- 2015
Exploiting Domain and Program Structure to Synthesize Efficient and Precise Data Flow Analyses (T).:
- https://doi.org/10.1109/ASE.2015.41
- 2015
Extracting Visual Contracts from Java Programs (T).:
- https://doi.org/10.1109/ASE.2015.63
- 2015
FLYAQ - Enabling Non-expert Users to Specify and Generate Missions of Autonomous Multicopters.:
- https://doi.org/10.1109/ASE.2015.104
- 2015
Fast and Precise Symbolic Analysis of Concurrency Bugs in Device Drivers (T).:
- https://doi.org/10.1109/ASE.2015.30
- 2015
Fixing Recurring Crash Bugs via Analyzing Q&amp;A Sites (T).:
- https://doi.org/10.1109/ASE.2015.81
- 2015
Fuzzing the Rust Typechecker Using CLP (T).:
- https://doi.org/10.1109/ASE.2015.65
- 2015
GRT - An Automated Test Generator Using Orchestrated Program Analysis.:
- https://doi.org/10.1109/ASE.2015.102
- 2015
GRT - Program-Analysis-Guided Random Testing (T).:
- https://doi.org/10.1109/ASE.2015.49
- 2015
General LTL Specification Mining (T).:
- https://doi.org/10.1109/ASE.2015.71
- 2015
Generating Fixtures for JavaScript Unit Testing (T).:
- https://doi.org/10.1109/ASE.2015.26
- 2015
Generating Qualifiable Avionics Software - An Experience Report (E).:
- https://doi.org/10.1109/ASE.2015.35
- 2015
Have We Seen Enough Traces? (T).:
- https://doi.org/10.1109/ASE.2015.62
- 2015
How Verified is My Code? Falsification-Driven Verification (T).:
- https://doi.org/10.1109/ASE.2015.40
- 2015
How do Developers Document Database Usages in Source Code? (N).:
- https://doi.org/10.1109/ASE.2015.67
- 2015
Interpolation Guided Compositional Verification (T).:
- https://doi.org/10.1109/ASE.2015.33
- 2015
Investigating Program Behavior Using the Texada LTL Specifications Miner.:
- https://doi.org/10.1109/ASE.2015.94
- 2015
JaConTeBe - A Benchmark Suite of Real-World Java Concurrency Bugs (T).:
- https://doi.org/10.1109/ASE.2015.87
- 2015
LED - Tool for Synthesizing Web Element Locators.:
- https://doi.org/10.1109/ASE.2015.110
- 2015
Lazy-CSeq - A Context-Bounded Model Checking Tool for Multi-threaded C-Programs.:
- https://doi.org/10.1109/ASE.2015.108
- 2015
Learning to Generate Pseudo-Code from Source Code Using Statistical Machine Translation (T).:
- https://doi.org/10.1109/ASE.2015.36
- 2015
Learning to Rank for Question-Oriented Software Text Retrieval (T).:
- https://doi.org/10.1109/ASE.2015.24
- 2015
Measuring Object-Oriented Design Principles.:
- https://doi.org/10.1109/ASE.2015.17
- 2015
MetaMod - A Modeling Formalism with Modularity at Its Core.:
- https://doi.org/10.1109/ASE.2015.29
- 2015
Mining User Opinions in Mobile App Reviews - A Keyword-Based Approach (T).:
- https://doi.org/10.1109/ASE.2015.85
- 2015
Model Checking Task Parallel Programs Using Gradual Permissions (N).:
- https://doi.org/10.1109/ASE.2015.75
- 2015
Model-Based Testing of Stateful APIs with Modbat.:
- https://doi.org/10.1109/ASE.2015.95
- 2015
Model-Driven Allocation Engineering (T).:
- https://doi.org/10.1109/ASE.2015.18
- 2015
Mutation-Based Fault Localization for Real-World Multilingual Programs (T).:
- https://doi.org/10.1109/ASE.2015.14
- 2015
Optimistic Shared Memory Dependence Tracing (T).:
- https://doi.org/10.1109/ASE.2015.11
- 2015
Performance Prediction of Configurable Software Systems by Fourier Learning (T).:
- https://doi.org/10.1109/ASE.2015.15
- 2015
Practically Tunable Static Analysis Framework for Large-Scale JavaScript Applications (T).:
- https://doi.org/10.1109/ASE.2015.28
- 2015
Predicting Delays in Software Projects Using Networked Classification (T).:
- https://doi.org/10.1109/ASE.2015.55
- 2015
Pseudogen - A Tool to Automatically Generate Pseudo-Code from Source Code.:
- https://doi.org/10.1109/ASE.2015.107
- 2015
Quantification of Software Changes through Probabilistic Symbolic Execution (N).:
- https://doi.org/10.1109/ASE.2015.78
- 2015
Recommending API Usages for Mobile Apps with Hidden Markov Model.:
- https://doi.org/10.1109/ASE.2015.109
- 2015
Refactorings for Android Asynchronous Programming.:
- https://doi.org/10.1109/ASE.2015.100
- 2015
Region and Effect Inference for Safe Parallelism (T).:
- https://doi.org/10.1109/ASE.2015.59
- 2015
Repairing Programs with Semantic Code Search (T).:
- https://doi.org/10.1109/ASE.2015.60
- 2015
Reverse Engineering Mobile Application User Interfaces with REMAUI (T).:
- https://doi.org/10.1109/ASE.2015.32
- 2015
Scaling Size and Parameter Spaces in Variability-Aware Software Performance Models (T).:
- https://doi.org/10.1109/ASE.2015.16
- 2015
Search-Based Synthesis of Probabilistic Models for Quality-of-Service Software Engineering (T).:
- https://doi.org/10.1109/ASE.2015.22
- 2015
Semantic Slicing of Software Version Histories (T).:
- https://doi.org/10.1109/ASE.2015.47
- 2015
SiPL - A Delta-Based Modeling Framework for Software Product Line Engineering.:
- https://doi.org/10.1109/ASE.2015.106
- 2015
SpyREST - Automated RESTful API Documentation Using an HTTP Proxy Server (N).:
- https://doi.org/10.1109/ASE.2015.52
- 2015
SpyREST in Action - An Automated RESTful API Documentation Tool.:
- https://doi.org/10.1109/ASE.2015.92
- 2015
Stability of Self-Adaptive Software Architectures.:
- https://doi.org/10.1109/ASE.2015.93
- 2015
Static Analysis of Implicit Control Flow - Resolving Java Reflection and Android Intents (T).:
- https://doi.org/10.1109/ASE.2015.69
- 2015
Static Analysis of JavaScript Web Applications in the Wild via Practical DOM Modeling (T).:
- https://doi.org/10.1109/ASE.2015.27
- 2015
Static Window Transition Graphs for Android (T).:
- https://doi.org/10.1109/ASE.2015.76
- 2015
String Analysis of Android Applications (N).:
- https://doi.org/10.1109/ASE.2015.20
- 2015
Study and Refactoring of Android Asynchronous Programming (T).:
- https://doi.org/10.1109/ASE.2015.50
- 2015
Synergizing Specification Miners through Model Fissions and Fusions (T).:
- https://doi.org/10.1109/ASE.2015.83
- 2015
Synthesising Interprocedural Bit-Precise Termination Proofs (T).:
- https://doi.org/10.1109/ASE.2015.10
- 2015
Synthesizing Web Element Locators (T).:
- https://doi.org/10.1109/ASE.2015.23
- 2015
TCA - An Efficient Two-Mode Meta-Heuristic Algorithm for Combinatorial Test Generation (T).:
- https://doi.org/10.1109/ASE.2015.61
- 2015
Test Analysis - Searching for Faults in Tests (N).:
- https://doi.org/10.1109/ASE.2015.37
- 2015
Testing Cross-Platform Mobile App Development Frameworks (T).:
- https://doi.org/10.1109/ASE.2015.21
- 2015
The ReMinds Tool Suite for Runtime Monitoring of Systems of Systems.:
- https://doi.org/10.1109/ASE.2015.91
- 2015
The iMPAcT Tool - Testing UI Patterns on Mobile Applications.:
- https://doi.org/10.1109/ASE.2015.96
- 2015
Tool Support for Analyzing Mobile App Reviews.:
- https://doi.org/10.1109/ASE.2015.101
- 2015
Tracking and Analyzing Cross-Cutting Activities in Developers&apos; Daily Work (N).:
- https://doi.org/10.1109/ASE.2015.43
- 2015
Tracking the Software Quality of Android Applications Along Their Evolution (T).:
- https://doi.org/10.1109/ASE.2015.46
- 2015
Understanding, Refactoring, and Fixing Concurrency in C#.:
- https://doi.org/10.1109/ASE.2015.82
- 2015
Variable Feature Usage Patterns in PHP (T).:
- https://doi.org/10.1109/ASE.2015.72
- 2015
