A comparison of 10 sampling algorithms for configurable systems.:
- https://doi.org/10.1145/2884781.2884793
- 2016
? A practical guide to select quality indicators for assessing pareto-based search
  algorithms in search-based software engineering.
: - https://doi.org/10.1145/2884781.2884880
  - 2016
An analysis of the search spaces for generate and validate patch generation systems.:
- https://doi.org/10.1145/2884781.2884872
- 2016
An empirical comparison of compiler testing techniques.:
- https://doi.org/10.1145/2884781.2884878
- 2016
An empirical study of practitioners&apos; perspectives on green software engineering.:
- https://doi.org/10.1145/2884781.2884810
- 2016
An empirical study on the impact of C++ lambdas and programmer experience.:
- https://doi.org/10.1145/2884781.2884849
- 2016
Angelix - scalable multiline program patch synthesis via symbolic analysis.:
- https://doi.org/10.1145/2884781.2884807
- 2016
AntMiner - mining more bugs by reducing noise interference.:
- https://doi.org/10.1145/2884781.2884870
- 2016
? Are &quot;non-functional&quot; requirements really non-functional? - an investigation
  of non-functional requirements in practice.
: - https://doi.org/10.1145/2884781.2884788
  - 2016
Augmenting API documentation with insights from stack overflow.:
- https://doi.org/10.1145/2884781.2884800
- 2016
Automated energy optimization of HTTP requests for mobile applications.:
- https://doi.org/10.1145/2884781.2884867
- 2016
Automated parameter optimization of classification techniques for defect prediction models.:
- https://doi.org/10.1145/2884781.2884857
- 2016
Automated partitioning of android applications for trusted execution environments.:
- https://doi.org/10.1145/2884781.2884817
- 2016
Automated test suite generation for time-continuous simulink models.:
- https://doi.org/10.1145/2884781.2884797
- 2016
Automatic model generation from documentation for Java API functions.:
- https://doi.org/10.1145/2884781.2884881
- 2016
Automatically learning semantic features for defect prediction.:
- https://doi.org/10.1145/2884781.2884804
- 2016
Behavioral log analysis with statistical guarantees.:
- https://doi.org/10.1145/2884781.2884805
- 2016
Belief &amp; evidence in empirical software engineering.:
- https://doi.org/10.1145/2884781.2884812
- 2016
BigDebug - debugging primitives for interactive big data processing in spark.:
- https://doi.org/10.1145/2884781.2884813
- 2016
Building a theory of job rotation in software engineering from an instrumental case study.:
- https://doi.org/10.1145/2884781.2884837
- 2016
CUSTODES - automatic spreadsheet cell clustering and smell detection using strong and weak features.:
- https://doi.org/10.1145/2884781.2884796
- 2016
Code anomalies flock together - exploring code anomaly agglomerations for locating design problems.:
- https://doi.org/10.1145/2884781.2884868
- 2016
Code review quality - how developers see it.:
- https://doi.org/10.1145/2884781.2884840
- 2016
Comparing white-box and black-box test prioritization.:
- https://doi.org/10.1145/2884781.2884791
- 2016
Coverage-driven test code generation for concurrent classes.:
- https://doi.org/10.1145/2884781.2884876
- 2016
Cross-project defect prediction using a connectivity-based unsupervised classifier.:
- https://doi.org/10.1145/2884781.2884839
- 2016
Cross-supervised synthesis of web-crawlers.:
- https://doi.org/10.1145/2884781.2884842
- 2016
Crowdsourcing program preconditions via a classification game.:
- https://doi.org/10.1145/2884781.2884865
- 2016
Debugging for reactive programming.:
- https://doi.org/10.1145/2884781.2884815
- 2016
Decoupling level - a new metric for architectural maintenance complexity.:
- https://doi.org/10.1145/2884781.2884825
- 2016
Discovering &quot;unknown known&quot; security requirements.:
- https://doi.org/10.1145/2884781.2884785
- 2016
? Disseminating architectural knowledge on open-source projects - a case study of
  the book &quot;architecture of open-source applications&quot;.
: - https://doi.org/10.1145/2884781.2884792
  - 2016
DoubleTake - fast and precise error detection via evidence-based dynamic analysis.:
- https://doi.org/10.1145/2884781.2884784
- 2016
Efficient large-scale trace checking using mapreduce.:
- https://doi.org/10.1145/2884781.2884832
- 2016
Energy profiles of Java collections classes.:
- https://doi.org/10.1145/2884781.2884869
- 2016
Exploring language support for immutability.:
- https://doi.org/10.1145/2884781.2884798
- 2016
Feature-model interfaces - the highway to compositional analyses of highly-configurable systems.:
- https://doi.org/10.1145/2884781.2884823
- 2016
Featured model-based mutation analysis.:
- https://doi.org/10.1145/2884781.2884821
- 2016
Feedback-directed instrumentation for deployed JavaScript applications.:
- https://doi.org/10.1145/2884781.2884846
- 2016
Finding and analyzing compiler warning defects.:
- https://doi.org/10.1145/2884781.2884879
- 2016
Finding security bugs in web applications using a catalog of access control patterns.:
- https://doi.org/10.1145/2884781.2884836
- 2016
Fixing deadlocks via lock pre-acquisitions.:
- https://doi.org/10.1145/2884781.2884819
- 2016
Floating-point precision tuning using blame analysis.:
- https://doi.org/10.1145/2884781.2884850
- 2016
From word embeddings to document similarities for improved information retrieval in software engineering.:
- https://doi.org/10.1145/2884781.2884862
- 2016
Generating performance distributions via probabilistic symbolic execution.:
- https://doi.org/10.1145/2884781.2884794
- 2016
Grounded theory in software engineering research - a critical review and guidelines.:
- https://doi.org/10.1145/2884781.2884833
- 2016
Guiding dynamic symbolic execution toward unverified program executions.:
- https://doi.org/10.1145/2884781.2884843
- 2016
How does regression test prioritization perform in real-world software evolution?:
- https://doi.org/10.1145/2884781.2884874
- 2016
How does the degree of variability affect bug finding?:
- https://doi.org/10.1145/2884781.2884831
- 2016
Identifying and quantifying architectural debt.:
- https://doi.org/10.1145/2884781.2884822
- 2016
Improving refactoring speed by 10X.:
- https://doi.org/10.1145/2884781.2884802
- 2016
IntEQ - recognizing benign integer overflows via equivalence checking across multiple precisions.:
- https://doi.org/10.1145/2884781.2884820
- 2016
Jumping through hoops - why do Java developers struggle with cryptography APIs?:
- https://doi.org/10.1145/2884781.2884790
- 2016
Learning API usages from bytecode - a statistical approach.:
- https://doi.org/10.1145/2884781.2884873
- 2016
Locking discipline inference and checking.:
- https://doi.org/10.1145/2884781.2884882
- 2016
Mining sandboxes.:
- https://doi.org/10.1145/2884781.2884782
- 2016
Missing data imputation based on low-rank recovery and semi-supervised regression for software effort estimation.:
- https://doi.org/10.1145/2884781.2884827
- 2016
MobiPlay - a remote execution based record-and-replay tool for mobile applications.:
- https://doi.org/10.1145/2884781.2884854
- 2016
Multi-objective software effort estimation.:
- https://doi.org/10.1145/2884781.2884830
- 2016
Nomen est omen - exploring and exploiting similarities between argument and parameter names.:
- https://doi.org/10.1145/2884781.2884841
- 2016
On the &quot;naturalness&quot; of buggy code.:
- https://doi.org/10.1145/2884781.2884848
- 2016
On the limits of mutation reduction strategies.:
- https://doi.org/10.1145/2884781.2884787
- 2016
On the techniques we create, the tools we build, and their misalignments - a study of KLEE.:
- https://doi.org/10.1145/2884781.2884835
- 2016
Optimizing selection of competing services with probabilistic hierarchical refinement.:
- https://doi.org/10.1145/2884781.2884861
- 2016
Overcoming open source project entry barriers with a portal for newcomers.:
- https://doi.org/10.1145/2884781.2884806
- 2016
PAC learning-based verification and model synthesis.:
- https://doi.org/10.1145/2884781.2884860
- 2016
PRADA - prioritizing android devices for apps by mining large-scale usage data.:
- https://doi.org/10.1145/2884781.2884828
- 2016
Performance issues and optimizations in JavaScript - an empirical study.:
- https://doi.org/10.1145/2884781.2884829
- 2016
Probing for requirements knowledge to stimulate architectural thinking.:
- https://doi.org/10.1145/2884781.2884801
- 2016
Proceedings of the 38th International Conference on Software Engineering, ICSE 2016, Austin, TX, USA, May 14-22, 2016:
- https://doi.org/10.1145/2884781
- 2016
Program synthesis using natural language.:
- https://doi.org/10.1145/2884781.2884786
- 2016
Quality experience - a grounded theory of successful agile projects without dedicated testers.:
- https://doi.org/10.1145/2884781.2884789
- 2016
Quantifying and mitigating turnover-induced knowledge loss - case studies of chrome and a project at avaya.:
- https://doi.org/10.1145/2884781.2884851
- 2016
RETracer - triaging crashes by reverse execution from partial memory dumps.:
- https://doi.org/10.1145/2884781.2884844
- 2016
Reducing combinatorics in GUI testing of android applications.:
- https://doi.org/10.1145/2884781.2884853
- 2016
Reference hijacking - patching, protecting and analyzing on unmodified and non-rooted android devices.:
- https://doi.org/10.1145/2884781.2884863
- 2016
Release planning of mobile apps based on user reviews.:
- https://doi.org/10.1145/2884781.2884818
- 2016
Reliability of Run-Time Quality-of-Service evaluation using parametric model checking.:
- https://doi.org/10.1145/2884781.2884814
- 2016
Revisit of automatic debugging via human focus-tracking analysis.:
- https://doi.org/10.1145/2884781.2884834
- 2016
Revisiting code ownership and its relationship with software quality in the scope of modern code review.:
- https://doi.org/10.1145/2884781.2884852
- 2016
Risk-driven revision of requirements models.:
- https://doi.org/10.1145/2884781.2884838
- 2016
SWIM - synthesizing what i mean - code search and idiomatic snippet synthesis.:
- https://doi.org/10.1145/2884781.2884808
- 2016
Scalable thread sharing analysis.:
- https://doi.org/10.1145/2884781.2884811
- 2016
Shadow of a doubt - testing for divergences between software versions.:
- https://doi.org/10.1145/2884781.2884845
- 2016
SourcererCC - scaling code clone detection to big-code.:
- https://doi.org/10.1145/2884781.2884877
- 2016
StubDroid - automatic inference of precise data-flow summaries for the android framework.:
- https://doi.org/10.1145/2884781.2884816
- 2016
Synthesizing framework models for symbolic execution.:
- https://doi.org/10.1145/2884781.2884856
- 2016
Termination-checking for LLVM peephole optimizations.:
- https://doi.org/10.1145/2884781.2884809
- 2016
The challenges of staying together while moving fast - an exploratory study.:
- https://doi.org/10.1145/2884781.2884871
- 2016
The emerging role of data scientists on software development teams.:
- https://doi.org/10.1145/2884781.2884783
- 2016
The evolution of C programming practices - a study of the Unix operating system 1973-2015.:
- https://doi.org/10.1145/2884781.2884799
- 2016
The impact of test case summaries on bug fixing performance - an empirical investigation.:
- https://doi.org/10.1145/2884781.2884847
- 2016
The sky is not the limit - multitasking across GitHub projects.:
- https://doi.org/10.1145/2884781.2884875
- 2016
Too long; didn&apos;t watch! - extracting relevant fragments from software development video tutorials.:
- https://doi.org/10.1145/2884781.2884824
- 2016
Toward a framework for detecting privacy policy violations in android application code.:
- https://doi.org/10.1145/2884781.2884855
- 2016
Type-aware concolic testing of JavaScript programs.:
- https://doi.org/10.1145/2884781.2884859
- 2016
Understanding and fixing multiple language interoperability issues - the C/Fortran case.:
- https://doi.org/10.1145/2884781.2884858
- 2016
Understanding asynchronous interactions in full-stack JavaScript.:
- https://doi.org/10.1145/2884781.2884864
- 2016
Using (bio)metrics to predict code quality online.:
- https://doi.org/10.1145/2884781.2884803
- 2016
VDTest - an automated framework to support testing for virtual devices.:
- https://doi.org/10.1145/2884781.2884866
- 2016
Work practices and challenges in pull-based development - the contributor&apos;s perspective.:
- https://doi.org/10.1145/2884781.2884826
- 2016
iDice - problem identification for emerging issues.:
- https://doi.org/10.1145/2884781.2884795
- 2016
